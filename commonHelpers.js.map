{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst input = document.querySelector('input[type=\"text\"]');\n\nconst startButton = document.querySelector('[data-start]');\nstartButton.disabled = true;\n\nconst daysCount = document.querySelector('[data-days]');\nconst hoursCount = document.querySelector('[data-hours]');\nconst minutesCount = document.querySelector('[data-minutes]');\nconst secondsCount = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    const timeRightNow = Date.now();\n    if (userSelectedDate.getTime() <= timeRightNow) {\n      startButton.disabled = true;\n      iziToast.warning({\n        message: 'Please choose date in the future',\n        position: 'topRight',\n        backgroundColor: 'red',\n      });\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\nflatpickr(input, options);\n\nstartButton.addEventListener(\"click\", (event) => {\n  event.preventDefault();\n  let timeRemaining = userSelectedDate - Date.now();\n\n  function convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    \n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n    \n    return { days, hours, minutes, seconds };\n  }\n  \n  const countdown = setInterval(() => {\n    timeRemaining -= 1000;\n    console.log(timeRemaining / 1000);\n\n    let timeCounter = convertMs(timeRemaining);\n\n    function addLeadingZero(value) {\n      return String(value).padStart(2, \"0\");\n    }\n    daysCount.textContent = addLeadingZero(timeCounter.days);\n    hoursCount.textContent = addLeadingZero(timeCounter.hours);\n    minutesCount.textContent = addLeadingZero(timeCounter.minutes);\n    secondsCount.textContent = addLeadingZero(timeCounter.seconds);\n\n    if ((timeRemaining / 1000) < 1) {\n      clearInterval(countdown);\n    }\n  }, 1000);\n});\n\n\n\n\n\n\n\n"],"names":["input","startButton","daysCount","hoursCount","minutesCount","secondsCount","userSelectedDate","options","selectedDates","timeRightNow","iziToast","flatpickr","event","timeRemaining","convertMs","ms","days","hours","minutes","seconds","countdown","timeCounter","addLeadingZero","value"],"mappings":"2GAMA,MAAMA,EAAQ,SAAS,cAAc,oBAAoB,EAEnDC,EAAc,SAAS,cAAc,cAAc,EACzDA,EAAY,SAAW,GAEvB,MAAMC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EACJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,GACjC,MAAMC,EAAe,KAAK,MACtBH,EAAiB,QAAS,GAAIG,GAChCR,EAAY,SAAW,GACvBS,EAAS,QAAQ,CACf,QAAS,mCACT,SAAU,WACV,gBAAiB,KACzB,CAAO,GAEDT,EAAY,SAAW,EAE1B,CACH,EACAU,EAAUX,EAAOO,CAAO,EAExBN,EAAY,iBAAiB,QAAUW,GAAU,CAC/CA,EAAM,eAAc,EACpB,IAAIC,EAAgBP,EAAmB,KAAK,IAAG,EAE/C,SAASQ,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,MAAMC,EAAY,YAAY,IAAM,CAClCP,GAAiB,IACjB,QAAQ,IAAIA,EAAgB,GAAI,EAEhC,IAAIQ,EAAcP,EAAUD,CAAa,EAEzC,SAASS,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACrC,CACDrB,EAAU,YAAcoB,EAAeD,EAAY,IAAI,EACvDlB,EAAW,YAAcmB,EAAeD,EAAY,KAAK,EACzDjB,EAAa,YAAckB,EAAeD,EAAY,OAAO,EAC7DhB,EAAa,YAAciB,EAAeD,EAAY,OAAO,EAExDR,EAAgB,IAAQ,GAC3B,cAAcO,CAAS,CAE1B,EAAE,GAAI,CACT,CAAC"}